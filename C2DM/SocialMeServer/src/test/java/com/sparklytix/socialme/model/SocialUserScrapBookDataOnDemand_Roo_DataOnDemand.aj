// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.sparklytix.socialme.model;

import com.sparklytix.socialme.model.SocialUser;
import com.sparklytix.socialme.model.SocialUserDataOnDemand;
import com.sparklytix.socialme.model.SocialUserScrapBook;
import java.lang.String;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect SocialUserScrapBookDataOnDemand_Roo_DataOnDemand {
    
    declare @type: SocialUserScrapBookDataOnDemand: @Component;
    
    private Random SocialUserScrapBookDataOnDemand.rnd = new SecureRandom();
    
    private List<SocialUserScrapBook> SocialUserScrapBookDataOnDemand.data;
    
    @Autowired
    private SocialUserDataOnDemand SocialUserScrapBookDataOnDemand.socialUserDataOnDemand;
    
    public SocialUserScrapBook SocialUserScrapBookDataOnDemand.getNewTransientSocialUserScrapBook(int index) {
        SocialUserScrapBook obj = new SocialUserScrapBook();
        setCreated(obj, index);
        setScrap(obj, index);
        setSocialUser(obj, index);
        return obj;
    }
    
    public void SocialUserScrapBookDataOnDemand.setCreated(SocialUserScrapBook obj, int index) {
        Date created = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setCreated(created);
    }
    
    public void SocialUserScrapBookDataOnDemand.setScrap(SocialUserScrapBook obj, int index) {
        String scrap = "scrap_" + index;
        obj.setScrap(scrap);
    }
    
    public void SocialUserScrapBookDataOnDemand.setSocialUser(SocialUserScrapBook obj, int index) {
        SocialUser socialUser = socialUserDataOnDemand.getRandomSocialUser();
        obj.setSocialUser(socialUser);
    }
    
    public SocialUserScrapBook SocialUserScrapBookDataOnDemand.getSpecificSocialUserScrapBook(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        SocialUserScrapBook obj = data.get(index);
        java.lang.Long id = obj.getId();
        return SocialUserScrapBook.findSocialUserScrapBook(id);
    }
    
    public SocialUserScrapBook SocialUserScrapBookDataOnDemand.getRandomSocialUserScrapBook() {
        init();
        SocialUserScrapBook obj = data.get(rnd.nextInt(data.size()));
        java.lang.Long id = obj.getId();
        return SocialUserScrapBook.findSocialUserScrapBook(id);
    }
    
    public boolean SocialUserScrapBookDataOnDemand.modifySocialUserScrapBook(SocialUserScrapBook obj) {
        return false;
    }
    
    public void SocialUserScrapBookDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = SocialUserScrapBook.findSocialUserScrapBookEntries(from, to);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'SocialUserScrapBook' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<com.sparklytix.socialme.model.SocialUserScrapBook>();
        for (int i = 0; i < 10; i++) {
            SocialUserScrapBook obj = getNewTransientSocialUserScrapBook(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> it = e.getConstraintViolations().iterator(); it.hasNext();) {
                    ConstraintViolation<?> cv = it.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
