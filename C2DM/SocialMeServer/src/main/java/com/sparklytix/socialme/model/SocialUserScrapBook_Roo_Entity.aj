// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.sparklytix.socialme.model;

import com.sparklytix.socialme.model.SocialUserScrapBook;
import java.lang.Long;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;

privileged aspect SocialUserScrapBook_Roo_Entity {
    
    @PersistenceContext
    transient EntityManager SocialUserScrapBook.entityManager;
    
    @Transactional
    public void SocialUserScrapBook.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void SocialUserScrapBook.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            SocialUserScrapBook attached = SocialUserScrapBook.findSocialUserScrapBook(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void SocialUserScrapBook.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void SocialUserScrapBook.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public SocialUserScrapBook SocialUserScrapBook.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        SocialUserScrapBook merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
    public static final EntityManager SocialUserScrapBook.entityManager() {
        EntityManager em = new SocialUserScrapBook().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long SocialUserScrapBook.countSocialUserScrapBooks() {
        return entityManager().createQuery("SELECT COUNT(o) FROM SocialUserScrapBook o", Long.class).getSingleResult();
    }
    
    public static List<SocialUserScrapBook> SocialUserScrapBook.findAllSocialUserScrapBooks() {
        return entityManager().createQuery("SELECT o FROM SocialUserScrapBook o", SocialUserScrapBook.class).getResultList();
    }
    
    public static SocialUserScrapBook SocialUserScrapBook.findSocialUserScrapBook(Long id) {
        if (id == null) return null;
        return entityManager().find(SocialUserScrapBook.class, id);
    }
    
    public static List<SocialUserScrapBook> SocialUserScrapBook.findSocialUserScrapBookEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM SocialUserScrapBook o", SocialUserScrapBook.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
}
