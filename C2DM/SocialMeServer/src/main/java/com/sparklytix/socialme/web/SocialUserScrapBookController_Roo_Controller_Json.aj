// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.sparklytix.socialme.web;

import com.sparklytix.socialme.model.SocialUser;
import com.sparklytix.socialme.model.SocialUserScrapBook;
import java.lang.Long;
import java.lang.String;
import java.util.Date;
import java.util.List;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

privileged aspect SocialUserScrapBookController_Roo_Controller_Json {
    
    @RequestMapping(value = "/{id}", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> SocialUserScrapBookController.showJson(@PathVariable("id") Long id) {
        SocialUserScrapBook socialuserscrapbook = SocialUserScrapBook.findSocialUserScrapBook(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/text; charset=utf-8");
        if (socialuserscrapbook == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(socialuserscrapbook.toJson(), headers, HttpStatus.OK);
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> SocialUserScrapBookController.listJson() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/text; charset=utf-8");
        List<SocialUserScrapBook> result = SocialUserScrapBook.findAllSocialUserScrapBooks();
        return new ResponseEntity<String>(SocialUserScrapBook.toJsonArray(result), headers, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> SocialUserScrapBookController.createFromJson(@RequestBody String json) {
        SocialUserScrapBook socialUserScrapBook = SocialUserScrapBook.fromJsonToSocialUserScrapBook(json);
        socialUserScrapBook.persist();
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/text");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> SocialUserScrapBookController.createFromJsonArray(@RequestBody String json) {
        for (SocialUserScrapBook socialUserScrapBook: SocialUserScrapBook.fromJsonArrayToSocialUserScrapBooks(json)) {
            socialUserScrapBook.persist();
        }
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/text");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> SocialUserScrapBookController.updateFromJson(@RequestBody String json) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/text");
        SocialUserScrapBook socialUserScrapBook = SocialUserScrapBook.fromJsonToSocialUserScrapBook(json);
        if (socialUserScrapBook.merge() == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> SocialUserScrapBookController.updateFromJsonArray(@RequestBody String json) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/text");
        for (SocialUserScrapBook socialUserScrapBook: SocialUserScrapBook.fromJsonArrayToSocialUserScrapBooks(json)) {
            if (socialUserScrapBook.merge() == null) {
                return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
            }
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public ResponseEntity<String> SocialUserScrapBookController.deleteFromJson(@PathVariable("id") Long id) {
        SocialUserScrapBook socialUserScrapBook = SocialUserScrapBook.findSocialUserScrapBook(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/text");
        if (socialUserScrapBook == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        socialUserScrapBook.remove();
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=BySocialUser", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> SocialUserScrapBookController.jsonFindSocialUserScrapBooksBySocialUser(@RequestParam("socialUser") SocialUser socialUser) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/text; charset=utf-8");
        return new ResponseEntity<String>(SocialUserScrapBook.toJsonArray(SocialUserScrapBook.findSocialUserScrapBooksBySocialUser(socialUser).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=BySocialUserAndCreatedGreaterThan", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> SocialUserScrapBookController.jsonFindSocialUserScrapBooksBySocialUserAndCreatedGreaterThan(@RequestParam("socialUser") SocialUser socialUser, @RequestParam("created") @DateTimeFormat(style = "M-") Date created) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/text; charset=utf-8");
        return new ResponseEntity<String>(SocialUserScrapBook.toJsonArray(SocialUserScrapBook.findSocialUserScrapBooksBySocialUserAndCreatedGreaterThan(socialUser, created).getResultList()), headers, HttpStatus.OK);
    }
    
}
