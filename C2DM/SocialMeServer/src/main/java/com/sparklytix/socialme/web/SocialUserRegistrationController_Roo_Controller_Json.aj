// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.sparklytix.socialme.web;

import com.sparklytix.socialme.model.SocialUser;
import com.sparklytix.socialme.model.SocialUserRegistration;
import java.lang.Long;
import java.lang.String;
import java.util.List;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

privileged aspect SocialUserRegistrationController_Roo_Controller_Json {
    
    @RequestMapping(value = "/{id}", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> SocialUserRegistrationController.showJson(@PathVariable("id") Long id) {
        SocialUserRegistration socialuserregistration = SocialUserRegistration.findSocialUserRegistration(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/text; charset=utf-8");
        if (socialuserregistration == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(socialuserregistration.toJson(), headers, HttpStatus.OK);
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> SocialUserRegistrationController.listJson() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/text; charset=utf-8");
        List<SocialUserRegistration> result = SocialUserRegistration.findAllSocialUserRegistrations();
        return new ResponseEntity<String>(SocialUserRegistration.toJsonArray(result), headers, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> SocialUserRegistrationController.createFromJson(@RequestBody String json) {
        SocialUserRegistration socialUserRegistration = SocialUserRegistration.fromJsonToSocialUserRegistration(json);
        socialUserRegistration.persist();
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/text");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> SocialUserRegistrationController.createFromJsonArray(@RequestBody String json) {
        for (SocialUserRegistration socialUserRegistration: SocialUserRegistration.fromJsonArrayToSocialUserRegistrations(json)) {
            socialUserRegistration.persist();
        }
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/text");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> SocialUserRegistrationController.updateFromJson(@RequestBody String json) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/text");
        SocialUserRegistration socialUserRegistration = SocialUserRegistration.fromJsonToSocialUserRegistration(json);
        if (socialUserRegistration.merge() == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> SocialUserRegistrationController.updateFromJsonArray(@RequestBody String json) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/text");
        for (SocialUserRegistration socialUserRegistration: SocialUserRegistration.fromJsonArrayToSocialUserRegistrations(json)) {
            if (socialUserRegistration.merge() == null) {
                return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
            }
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public ResponseEntity<String> SocialUserRegistrationController.deleteFromJson(@PathVariable("id") Long id) {
        SocialUserRegistration socialUserRegistration = SocialUserRegistration.findSocialUserRegistration(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/text");
        if (socialUserRegistration == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        socialUserRegistration.remove();
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByRegistrationIdEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> SocialUserRegistrationController.jsonFindSocialUserRegistrationsByRegistrationIdEquals(@RequestParam("registrationId") String registrationId) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/text; charset=utf-8");
        return new ResponseEntity<String>(SocialUserRegistration.toJsonArray(SocialUserRegistration.findSocialUserRegistrationsByRegistrationIdEquals(registrationId).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=BySocialUser", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> SocialUserRegistrationController.jsonFindSocialUserRegistrationsBySocialUser(@RequestParam("socialUser") SocialUser socialUser) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/text; charset=utf-8");
        return new ResponseEntity<String>(SocialUserRegistration.toJsonArray(SocialUserRegistration.findSocialUserRegistrationsBySocialUser(socialUser).getResultList()), headers, HttpStatus.OK);
    }
    
}
